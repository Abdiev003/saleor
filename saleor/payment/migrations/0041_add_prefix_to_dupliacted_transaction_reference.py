# Generated by Django 3.2.15 on 2022-09-22 08:09

from django.db import migrations

DEFAULT_BATCH_SIZE = 300


def queryset_in_batches(queryset):
    """Slice a queryset into batches."""
    index = 0
    batch_size = DEFAULT_BATCH_SIZE
    while True:
        qs = queryset.all()[index:batch_size]
        pks = list(qs.values_list("pk", flat=True))
        if not pks:
            break

        yield pks

        index = batch_size
        batch_size += DEFAULT_BATCH_SIZE


def add_prefix_to_duplicated_transaction_reference(apps, schema_editor):
    TransactionItem = apps.get_model("payment", "TransactionItem")

    transactions_to_update = TransactionItem.objects.all().order_by("reference", "id")
    last_reference = None
    suffix_index = 1
    for batch_pks in queryset_in_batches(transactions_to_update):
        transactions = TransactionItem.objects.filter(pk__in=batch_pks).order_by(
            "reference", "id"
        )
        for transaction in transactions:
            if not transaction.reference:
                transaction.psp_reference = None
            elif transaction.reference != last_reference:
                last_reference = transaction.reference
                suffix_index = 1
                # skip adding prefix to the first reference
                transaction.psp_reference = transaction.reference
            else:
                transaction.psp_reference = (
                    f"{transaction.reference}_saleor:{suffix_index}"
                )
                suffix_index += 1
        TransactionItem.objects.bulk_update(transactions, ["psp_reference"])


def add_prefix_to_duplicated_transaction_event_reference(apps, schema_editor):
    TransactionEvent = apps.get_model("payment", "TransactionEvent")
    events_to_update = TransactionEvent.objects.all().order_by("reference", "id")

    last_reference = None
    suffix_index = 1
    for batch_pks in queryset_in_batches(events_to_update):
        events = TransactionEvent.objects.filter(pk__in=batch_pks).order_by(
            "reference", "id"
        )
        for event in events:
            if not event.reference:
                event.psp_reference = None
            elif event.reference != last_reference:
                last_reference = event.reference
                suffix_index = 1
                # skip adding prefix to the first reference
                event.psp_reference = event.reference
            else:
                event.psp_reference = f"{event.reference}_saleor:{suffix_index}"
                suffix_index += 1
        TransactionEvent.objects.bulk_update(events, ["psp_reference"])


class Migration(migrations.Migration):

    dependencies = [
        ("payment", "0040_auto_20220922_0959"),
    ]

    operations = [
        migrations.RunPython(
            add_prefix_to_duplicated_transaction_reference, migrations.RunPython.noop
        ),
        migrations.RunPython(
            add_prefix_to_duplicated_transaction_event_reference,
            migrations.RunPython.noop,
        ),
    ]
